import { NestedStack, NestedStackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as s3 from 'aws-cdk-lib/aws-s3';
import * as s3deploy from 'aws-cdk-lib/aws-s3-deployment';
import * as glue from 'aws-cdk-lib/aws-glue';
import { StackConfig } from '@trilogy-group/lambda-cdk-infra';
import { ServicePrincipal } from 'aws-cdk-lib/aws-iam';
import { ProjectStructure } from './paths';
import { AWSAccount, generateStackResourceName } from '../../config/environments';

interface GlueStackProps extends NestedStackProps {
  readonly bucket: s3.IBucket;
  readonly crawlerRoleName: string;
}

export class StatsTrackerGlueStack extends NestedStack {
  constructor(scope: Construct, id: string, config: StackConfig, props: GlueStackProps) {
    super(scope, id);

    const description = 'Generated by trilogy-group/xo-hiring-stats-tracker automation. CDKv2.';

    const targetDir = 'latest-orc';

    // job script source code
    new s3deploy.BucketDeployment(this, 'job-script', {
      destinationBucket: props.bucket,
      sources: [s3deploy.Source.asset(ProjectStructure.jobAsset)],
      destinationKeyPrefix: 'job-asset/',
    });

    // to convert from CSV to ORC
    this.job = new glue.CfnJob(this, 'job', {
      name: generateStackResourceName(config, 'job'),
      description: description,
      command: {
        name: 'glueetl',
        pythonVersion: '3',
        scriptLocation: props.bucket.s3UrlForObject('job-asset/job-script.py'),
      },
      role: this.getJobRole(config, props).roleArn,
      defaultArguments: {
        '--bucketName': props.bucket.bucketName,
        '--targetDir': targetDir,
        '--sourceDirPrefix': 'backup/day_',
      },
      glueVersion: '3.0',
      workerType: 'G.1X',
      numberOfWorkers: 20,
      maxRetries: 0,
      timeout: 90,
      executionProperty: { maxConcurrentRuns: 1 },
    });

    // where to store ORC schema
    const databaseId = 'backup';
    const databaseName = generateStackResourceName(config, databaseId);
    this.database = new glue.CfnDatabase(this, databaseId, {
      catalogId: AWSAccount,
      databaseInput: {
        name: databaseName,
        description: description,
      },
    });

    // to discover ORC schema
    this.crawler = new glue.CfnCrawler(this, 'crawler', {
      name: generateStackResourceName(config, 'crawler'),
      description: description,
      databaseName: databaseName,
      role: props.crawlerRoleName,
      targets: {
        s3Targets: [
          {
            path: props.bucket.s3UrlForObject(targetDir) + '/',
          },
        ],
      },
    });
  }

  job: glue.CfnJob;
  crawler: glue.CfnCrawler;
  database: glue.CfnDatabase;

  private getJobRole(config: StackConfig, props: GlueStackProps): iam.Role {
    const roleName = generateStackResourceName(config, 'job-role');
    const jobRole = new iam.Role(this, roleName, {
      roleName,
      assumedBy: new ServicePrincipal('glue.amazonaws.com'),
    });
    jobRole.addManagedPolicy({
      managedPolicyArn: 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole',
    });
    jobRole.addToPolicy(
      new iam.PolicyStatement({
        actions: ['s3:*'],
        resources: [props.bucket.bucketArn, props.bucket.arnForObjects('*')],
      }),
    );
    return jobRole;
  }
}
